    # DownCasting #

 what is DownCasting = Downcasting means converting into a super class reference into a sub class reference is known as DownCasting.

 why Downcasting = 
 - Super-class reference = super-class reference is used by super method.
 - Sub-class reference = sub-class reference is used by sub method.

 - agar super-class reference ko sub-class method ko use krna h toh downcasting krna hi hoga.






   package practice;

abstract class Employee 
{
	int id;
	String name;
	double salary;
	double CalculateSal;
	
	
	public Employee()
	{
		
	}//default constructor

	public Employee(int id, String name, double salary) {
		super();
		this.id = id;
		this.name = name;
		this.salary = salary;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public double getSalary() {
		return salary;
	}

	public void setSalary(double salary) {
		this.salary = salary;
	}
 
	
	
  abstract  double CalculateSal();
	
	
	public String toString()
	{
		return "ID :" +id + ", Name :"+name + ", Salary :" +salary;
	}
	
}//class Employee ends here

class SalesManager extends Employee {
	
	double incentive;
	double target;
	double totalSalary;
	
	
	public SalesManager() {
		// TODO Auto-generated constructor stub
	}

	public SalesManager(int id, String name, double salary, double incentive, double target) {
		super(id, name, salary);
		this.incentive = incentive;
		this.target = target;
	}

	public double getIncentive() {
		return incentive;
	}

	public void setIncentive(double incentive) {
		this.incentive = incentive;
	}

	public double getTarget() {
		return target;
	}

	public void setTarget(double target) {
		this.target = target;
	}
	

	
      double CalculateSal()
	{
		return totalSalary = getSalary() + getIncentive();
	}

    public String toString()
    {
    	System.out.println("--- SalesManager Details ---");
    	return super.toString() + ", Incentive :"+incentive + ", Target :"+target + ", Total Salary :" +totalSalary ;
    }
	
}//class SalesManager ends here

class Admin extends Employee {
	
	double allowance;
	double totalSalary;
	
	public Admin() {
		// TODO Auto-generated constructor stub
	}

	public Admin(int id, String name, double salary, double allowance) {
		super(id, name, salary);
		this.allowance = allowance;
	}

	public double getAllowance() {
		return allowance;
	}

	public void setAllowance(double allowance) {
		this.allowance = allowance;
	}

	public double getTotalSalary() {
		return totalSalary;
	}

	public void setTotalSalary(double totalSalary) {
		this.totalSalary = totalSalary;
	}
	
	public double CalculateSal()
	{
		return totalSalary = getSalary() + getAllowance();
		
	}
	
	public String toString()
	{
		System.out.println("--- Admin Details ---");
		return super.toString() +", Allowance :" + allowance + ", Total Salary :"+totalSalary ;
	}
	
	
}//class Admin ends here

class HR extends Employee {
	
	double commision;
	double totalSalary;
	
	public HR() {
		
	}

	public HR(int id, String name, double salary, double commision) {
		super(id, name, salary);
		this.commision = commision;
	}

	public double getCommision() {
		return commision;
	}

	public void setCommision(double commision) {
		this.commision = commision;
	}

	public double getTotalSalary() {
		return totalSalary;
	}

	public void setTotalSalary(double totalSalary) {
		this.totalSalary = totalSalary;
	}
	
	double CalculateSal()
	{
		return totalSalary = getSalary() + getCommision();
	}
	
	public String toString()
	{
		System.out.println("--- HR Details ---");
		return super.toString() +", Commision :" +commision + ", Total Salary :"+totalSalary;
	}
	
	
}

public class Demo {
	
	public static void main(String[] args) {
		  
	   Employee e1 = new SalesManager(12,"Ritik",40000,4000,40);
	   Employee e2 = new Admin(11,"Rahul",30000,3000);
	   Employee e3 = new HR(15,"Raghu",20000,2000);
	   
	   
	   if(e1 instanceof SalesManager)
	   {
		    SalesManager s1 = (SalesManager)e1;
		    s1.CalculateSal();
		   System.out.println(s1);
		   System.out.println();//next line used
	   }
	   
	   if (e2 instanceof Admin)
	   {
		   Admin a1 = (Admin)e2;
		   a1.CalculateSal();
		   System.out.println(a1);
		   System.out.println();//next line used
	   }
	   
	   if(e3 instanceof HR)
	   {
		   HR h1 = (HR)e3;
		   h1.CalculateSal();
		   System.out.println(h1);

	   }
	}
	
}